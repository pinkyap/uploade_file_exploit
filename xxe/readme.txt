XXE via File Upload:

The file upload functionality, opens the gateway for the XML External Entities, especially when the application accepts the file formats that support XML. Since the SVG format uses XML, an attacker can submit a malicious SVG image and so reach hidden attack surface for XXE vulnerabilities.

Try Uploading this code with .svg extension and retrieve the svg file from application to check:

<?xml version="1.0" standalone="yes"?>
<!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]>
<svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
<text font-size="16" x="0" y="16">&xxe;</text></svg>


    Further Reads:
    https://hackerone.com/reports/897244
    https://www.exploit-db.com/docs/49732
    https://portswigger.net/web-security/xxe/lab-xxe-via-file-upload
    
    
----------
Exploiting XXE to Retrieve files from the server
Exploiting XXE to perform SSRF on the backend Systems.
Blind XXE to exfiltrate the data o
------------

toh agar example dekho toh koi website reqeust me agar xml data ke though request kr rahi h toh hum vha XXE vulnebility try kr sakte h 
We can also exploit the XXE to retrieve files from the system and this is the most common attack scenario
of XXE. Lets take an example
examle

There is bitcoin website “example.com”, whenever a user tries buy the bitcoin the website actually makes a
XML request to check the current price of bitcoin. The request which is used to check the price looks like this
---------
<?xml version="1.0" encoding="UTF-8"?>
<price><current_price>btc</current_price></price>
-------------
You can see that this is an XML request which is being sent to check price. The parameters of this request is
being parsed by an XML parser and then the response is returned to the user. In order to test the
vulnerability we can craft a simple payload to check whether the application is vulnerable to XXE or not

Exploitation

So we are crafting a request which tries to fetch the /etc/passwd file from the server. The crafted request
looks like this.
----------------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [ <!ENTITY fetch SYSTEM "file:///etc/hostname">]>
<price><current_price>&fetch;</current_price></price>
--------------------
This payload actually contains an external entity &fetch; whose value is the content of the of /etc/hostname
file.
As soon as this crafted request is sent to the server, since the XML parser and the application is not
validating the user inputs, the request gets processed and the attacker gets the content of the
/etc/hostname file.
This also means that the application is vulnerable to XXE.


==============

XXE VIA FILE UPLOADE 
toh phle ki agar wesbite hume svg file  uplodae krne dearhie h toh hum xxe attacekr try kr sakte h 
First lets discuss what are SVG files.
SVG Files: SVG file actually defines graphics in XML format.
Since these files defines graphics in XML format then these files create a lot of attack scenarios like we can
actually execute the XSS using the SVG file and can do a lot more. We can also execute XXE using these files
which
When we upload SVG image from client side, and there is no verification of content/ commands on
server side. Therefore, a situation may arise where attacker can execute malicious commands to fetch
the internal details. Such as fetching /etc/passwd file and if the server handling the request is using
AWS then we can fetch the credentials as wel


so in example humare pass .svg file uploade kr sakte h phit uske bad 
Creating of Malicious SVG file
MM.DD.20XXBlog.securitybyng.ninja9
The SVG files format starts defining the XML version first and then we can include our custom payload with
some attributes such as height width and font size in the image.
Here is the malicious payload
---------------
<?xml version="1.0" standalone="yes"?>
<!DOCTYPE foo [ <!ENTITY fetch SYSTEM "file:///etc/passwd">]>
<svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
<text font-size=“23" x=“8" y=“28">&fetch;</text>
</svg>
-------------------

Attributes in the file
 
Blog.securitybyng.ninja
 
I hope you remember he example of XXE to retrieve files we will use the first line as it is to retrieve the file.
<!DOCTYPE foo [ <!ENTITY fetch SYSTEM "file:///etc/passwd">]>
In the next lines I have defined the width and height of the SVG files in pixels.
The another sensitive attribute in the file is
<text font-size=“10" x=“0" y=“28">&fetch;</text>
This actually defines the font-size of the characters which will be fetched from the /etc/passwd file. It is very
important because if the font size is larger then you will not be able to read anything fetched from the
/etc/passwd file and it is the same case if they are smaller. You can actaully modify the font size on case to
case basis. The other attribute of x and y defines the axis on which the text is going to render.
Our file is now ready save this file as image.svg and upload it.


Exploitation
MM.DD.20XXBlog.securitybyng.ninja11
Upload the file and take a look at your avatar image. You will find that it have the contents of /etc/passwd
file. I have blurred the image to hide the sensitive informatio

Remediation
 Blog.securitybyng.ninja12
• 1. If you are allowing user to upload image file, whitelist the extension which are needed
• 2. If accepting svg files are business requirements then put a restrictions in place so that the
instructions in those files doesn’t get processed without any validation


references
 log.securitybyng.ninja13
• https://portswigger.net/web-security/xxe
• https://gupta-bless.medium.com/exploiting-xxe-for-ssrf-c23892374c0c
• https://gupta-bless.medium.com/exploitation-xml-external-entity-xxe-1f5f3e7bc5c4

